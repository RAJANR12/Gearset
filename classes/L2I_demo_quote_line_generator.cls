//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

global with sharing class L2I_demo_quote_line_generator {
    public static Boolean debug = true;
    private static List<SBQQ__QuoteLine__c> quoteLinesToAdd;
    private static List<SBQQ__QuoteLine__c> quoteLinesToDelete;
    private static Map<String, CPQ_ApiDataModels.ProductAddContext> productAddContextMap; //For CPQ API
    private static Map<String, CPQ_ApiDataModels.QuoteLineGroupModel> quoteLineGroupModelMap;  //For CPQ API
    private static Integer groupOrdinality; // Hack to order the Quote Groups
    private static CPQ_ApiDataModels.QuoteModel quoteModel;
    private static Id pricebookId;
    private static String CurrencyIsoCode;

    private static void initialize() {
        quoteLinesToAdd = new List<SBQQ__QuoteLine__c>();
        quoteLinesToDelete = new List<SBQQ__QuoteLine__c>();
        productAddContextMap = new Map<String, CPQ_ApiDataModels.ProductAddContext>();
        quoteLineGroupModelMap = new Map<String, CPQ_ApiDataModels.QuoteLineGroupModel>();
        groupOrdinality = 1;
    }

    public class POCPartsList {
        public String l2igroup;
        public String l2ipart;
        public String l2idescription;
        public Integer l2iquantity;
        public String l2igroupid;
        public String l2iproductid;

        public List<POCPartsList> parseListFromJSON(String jsonData) {
            return (List<POCPartsList>) System.JSON.deserialize(jsonData, List<POCPartsList>.class);
        }
    }

    private static CPQ_ApiDataModels.QuoteLineGroupModel getQuoteLineGroupModel(String name, Id solutionGroup) {
        if (quoteLineGroupModelMap.containsKey(name)) {
            return quoteLineGroupModelMap.get(name);
        }
        CPQ_ApiDataModels.QuoteLineGroupModel qlgm = new CPQ_ApiDataModels.QuoteLineGroupModel();
        qlgm.record = new SBQQ__QuoteLineGroup__c(
            Name = name
            ,SBQQ__Quote__c = quoteModel.record.Id
            ,SBQQ__SolutionGroup__c = solutionGroup
            ,SBQQ__Number__c = groupOrdinality
            ,SBQQ__CustomerTotal__c = 0
            ,SBQQ__ListTotal__c = 0
            ,SBQQ__NetTotal__c = 0
        );
        insert qlgm.record;
        qlgm.netNonSegmentTotal = 0;
        qlgm.key = groupOrdinality;
        quoteLineGroupModelMap.put(name, qlgm);
        quoteModel.LineItemGroups.add(qlgm);
        if(debug) {
            System.debug(LoggingLevel.WARN, 'Added QuoteLineGroupModel, Key: ' + groupOrdinality);
        }
        groupOrdinality++;
        return qlgm;
    }

    // We are going to not use this now, the cost of adding products this way is prohibitive.
    // The code can be converted to a batch process if necesary to avoid limiting out
    private static CPQ_ApiDataModels.ProductAddContext getProductAddContext(String name, Id solutionGroup) {
        CPQ_ApiDataModels.QuoteLineGroupModel thisGroup = getQuoteLineGroupModel(name, solutionGroup);
        if (productAddContextMap.containsKey(name)) {
            return productAddContextMap.get(name);
        }
        CPQ_ApiDataModels.ProductAddContext thisProductAddContext = 
            new CPQ_ApiDataModels.ProductAddContext(quoteModel, new List<CPQ_ApiDataModels.ProductModel>(), thisGroup.key);
        productAddContextMap.put(name, thisProductAddContext);
        if(debug) {
            System.debug(LoggingLevel.WARN, 'Added ProductAddContext, GroupName: ' + name);
        }
        return thisProductAddContext;
    }


    private static void parseQuote(Id quoteId) {
        //This will fail on a bad quote ID, wrap in try
        quoteModel = CPQ_ApiWrapper.getQuoteModel(quoteId);
        //Make sure this is set...
        if (!quoteModel.record.SBQQ__LineItemsGrouped__c) {
            quoteModel.record.SBQQ__LineItemsGrouped__c = true;
            CPQ_ApiDataModels.QuoteModel savedQuoteModel = CPQ_ApiWrapper.saveQuote(quoteModel); 
            quoteModel = savedQuoteModel;   
        }
        pricebookId = quoteModel.record.SBQQ__PricebookId__c;
        CurrencyIsoCode = quoteModel.record.CurrencyIsoCode;
        Integer groupCount = 0;
        
        for (CPQ_ApiDataModels.QuoteLineGroupModel thisGroup : quoteModel.lineItemGroups) {
            if (!quoteLineGroupModelMap.containsKey(thisGroup.record.Name)) {
                quoteLineGroupModelMap.put(thisGroup.record.Name,thisGroup);
                groupOrdinality = groupOrdinality <= thisGroup.key ? thisGroup.key + 1 : groupOrdinality;  //Hack to keep the keys unique
                groupCount++;
            }
        }
        if(debug) {
            System.debug(LoggingLevel.WARN, 'Quote ' + quoteModel.record.Name + ' Pricebook ' + pricebookId);
            System.debug(LoggingLevel.WARN, 'Number of Quote Groups: ' + groupCount);
        }
    }

    public static List<POCPartsList> parsePartsList(String staticResource) {
        StaticResource sr= [select id, body from StaticResource Where Name = :staticResource];
        return (List<POCPartsList>) System.JSON.deserialize(sr.body.toString(), List<POCPartsList>.class);
    }

    @InvocableMethod(label='Program Table Quote Builder'
        description='Process to modify an existing quote to match a parts list document')
    public static List<Results> DemoQuoteLineGenerator (List<Requests> requests)
    {
        // Bail out if we do not have a [valid] Quote
        if(requests == null || requests[0].quoteId == null || requests[0].partListStaticResource == null) {
            return new List<results>{new Results()};  // Return an empty List
        }
        initialize();  //  Handle non-constructor based initialization of Class variables
        parseQuote(requests[0].quoteId);  // We will use the API model to get the rich current Quote state
        
        //TODO Update Quantity
        for (POCPartsList thisPart : parsePartsList(requests[0].partListStaticResource)) {

            CPQ_ApiDataModels.QuoteLineGroupModel thisGroup = getQuoteLineGroupModel(thisPart.l2igroup, thisPart.l2igroupid);

            quoteLinesToAdd.add( new SBQQ__QuoteLine__c(
                SBQQ__Quote__c = requests[0].quoteId
                ,SBQQ__Product__c = thisPart.l2iproductid
                ,SBQQ__Group__c = thisGroup.record.Id
                ,SBQQ__Quantity__c = thisPart.l2iquantity
                ,SBQQ__RequiredBy__c = null
                ,SBQQ__SubscriptionScope__c = 'Group'        
            ));
            /*
             * This costs too much, have to convert to batch to avoid limiting out
            CPQ_ApiDataModels.ProductAddContext pac = getProductAddContext(thisPart.l2igroup, thisPart.l2igroupid);
            pac.addProductModel(CPQ_ApiWrapper.loadProduct(thisPart.l2iproductid, pricebookId, currencyIsoCode));
             */

            if (debug) {
                System.debug(LoggingLevel.WARN, 'Part Line: ' + thisPart);
            }
        }

        insert quoteLinesToAdd;
        //TODO  Some kind of delete for quoteLinesToDelete



/*
 * This is the code for working via the CPQ API, which works, but can only handle a very small set of products
 * Hence, we are not going to use it!
 * 
        //TODO Change the product add context to keep the updated quoteModel moving...
        //Can completely change the process, since the product add context is just a model...
        for (CPQ_ApiDataModels.ProductAddContext pac : productAddContextMap.values()) {
            CPQ_ApiDataModels.QuoteModel updatedQuoteModel = CPQ_ApiWrapper.addProductsToQuote(pac);
            CPQ_ApiDataModels.QuoteModel savedQuoteModel = CPQ_ApiWrapper.saveQuote(updatedQuoteModel);
        } 
 * 
 */        
        Results thisResult = new Results();
        thisResult.quoteLines = quoteLinesToAdd;
        thisResult.quoteLinesAdded = quoteLinesToAdd.size();
        thisResult.quoteLinesDeleted = quoteLinesToDelete.size();
        return new List<results>{thisResult};
    }


    global class Requests {
        @InvocableVariable
        global Id quoteId; 
        
        @InvocableVariable
        global String partListStaticResource;
    }

    global class Results {
        @InvocableVariable
        global List<SBQQ__QuoteLine__c> quoteLines;

        @InvocableVariable
        global Integer quoteLinesAdded;

        @InvocableVariable
        global Integer quoteLinesDeleted;
    }    
}